// <auto-generated />
using System;
using BeItmoBackend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BeItmoBackend.Data.Migrations
{
    [DbContext(typeof(BeItmoContext))]
    [Migration("20230621205425_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BeItmoBackend.Data.Categories.Models.CategoryDbModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_categories");

                    b.ToTable("categories", (string)null);
                });

            modelBuilder.Entity("BeItmoBackend.Data.Happiness.Models.HappinessCheckpointDbModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("note");

                    b.Property<int>("Score")
                        .HasColumnType("integer")
                        .HasColumnName("score");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_happiness_checkpoints");

                    b.ToTable("happiness_checkpoints", (string)null);
                });

            modelBuilder.Entity("BeItmoBackend.Data.Interests.Models.InterestDbModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_interests");

                    b.ToTable("interests", (string)null);
                });

            modelBuilder.Entity("BeItmoBackend.Data.UniversityEvents.Models.AttendedUniversityEventDbModel", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid")
                        .HasColumnName("event_id");

                    b.Property<int>("Score")
                        .HasColumnType("integer")
                        .HasColumnName("score");

                    b.HasKey("UserId", "EventId")
                        .HasName("pk_attended_university_events");

                    b.ToTable("attended_university_events", (string)null);
                });

            modelBuilder.Entity("BeItmoBackend.Data.UniversityEvents.Models.UniversityEventDbModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<string>("Contacts")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("contacts");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<int>("CreatorId")
                        .HasColumnType("integer")
                        .HasColumnName("creator_id");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<string>("PictureLink")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("picture_link");

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("place");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_university_events");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_university_events_category_id");

                    b.ToTable("university_events", (string)null);
                });

            modelBuilder.Entity("BeItmoBackend.Data.UserStatistics.Models.UserStatisticDbModel", b =>
                {
                    b.Property<Guid>("TypeValueId")
                        .HasColumnType("uuid")
                        .HasColumnName("type_value_id");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    b.Property<int>("PrizeCounter")
                        .HasColumnType("integer")
                        .HasColumnName("prize_counter");

                    b.Property<int>("TapCounter")
                        .HasColumnType("integer")
                        .HasColumnName("tap_counter");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("TypeValueId", "UserId")
                        .HasName("pk_user_statistics");

                    b.ToTable("user_statistics", (string)null);
                });

            modelBuilder.Entity("BeItmoBackend.Data.Users.Models.UserDbModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EcoScore")
                        .HasColumnType("integer")
                        .HasColumnName("eco_score");

                    b.Property<int>("FitScore")
                        .HasColumnType("integer")
                        .HasColumnName("fit_score");

                    b.Property<int>("FriendlinessScore")
                        .HasColumnType("integer")
                        .HasColumnName("friendliness_score");

                    b.Property<int>("HealthScore")
                        .HasColumnType("integer")
                        .HasColumnName("health_score");

                    b.Property<int>("OpenScore")
                        .HasColumnType("integer")
                        .HasColumnName("open_score");

                    b.Property<int>("ProScore")
                        .HasColumnType("integer")
                        .HasColumnName("pro_score");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("CategoryDbModelUserDbModel", b =>
                {
                    b.Property<Guid>("CategoriesId")
                        .HasColumnType("uuid")
                        .HasColumnName("categories_id");

                    b.Property<int>("UserDbModelId")
                        .HasColumnType("integer")
                        .HasColumnName("user_db_model_id");

                    b.HasKey("CategoriesId", "UserDbModelId")
                        .HasName("pk_category_db_model_user_db_model");

                    b.HasIndex("UserDbModelId")
                        .HasDatabaseName("ix_category_db_model_user_db_model_user_db_model_id");

                    b.ToTable("category_db_model_user_db_model", (string)null);
                });

            modelBuilder.Entity("InterestDbModelUserDbModel", b =>
                {
                    b.Property<Guid>("InterestsId")
                        .HasColumnType("uuid")
                        .HasColumnName("interests_id");

                    b.Property<int>("UserDbModelId")
                        .HasColumnType("integer")
                        .HasColumnName("user_db_model_id");

                    b.HasKey("InterestsId", "UserDbModelId")
                        .HasName("pk_interest_db_model_user_db_model");

                    b.HasIndex("UserDbModelId")
                        .HasDatabaseName("ix_interest_db_model_user_db_model_user_db_model_id");

                    b.ToTable("interest_db_model_user_db_model", (string)null);
                });

            modelBuilder.Entity("events_interests", b =>
                {
                    b.Property<Guid>("InterestsId")
                        .HasColumnType("uuid")
                        .HasColumnName("interests_id");

                    b.Property<Guid>("UniversityEventDbModelId")
                        .HasColumnType("uuid")
                        .HasColumnName("university_event_db_model_id");

                    b.HasKey("InterestsId", "UniversityEventDbModelId")
                        .HasName("pk_events_interests");

                    b.HasIndex("UniversityEventDbModelId")
                        .HasDatabaseName("ix_events_interests_university_event_db_model_id");

                    b.ToTable("events_interests", (string)null);
                });

            modelBuilder.Entity("BeItmoBackend.Data.UniversityEvents.Models.UniversityEventDbModel", b =>
                {
                    b.HasOne("BeItmoBackend.Data.Categories.Models.CategoryDbModel", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_university_events_categories_category_id");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("CategoryDbModelUserDbModel", b =>
                {
                    b.HasOne("BeItmoBackend.Data.Categories.Models.CategoryDbModel", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_category_db_model_user_db_model_categories_categories_id");

                    b.HasOne("BeItmoBackend.Data.Users.Models.UserDbModel", null)
                        .WithMany()
                        .HasForeignKey("UserDbModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_category_db_model_user_db_model_users_user_db_model_id");
                });

            modelBuilder.Entity("InterestDbModelUserDbModel", b =>
                {
                    b.HasOne("BeItmoBackend.Data.Interests.Models.InterestDbModel", null)
                        .WithMany()
                        .HasForeignKey("InterestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_interest_db_model_user_db_model_interests_interests_id");

                    b.HasOne("BeItmoBackend.Data.Users.Models.UserDbModel", null)
                        .WithMany()
                        .HasForeignKey("UserDbModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_interest_db_model_user_db_model_users_user_db_model_id");
                });

            modelBuilder.Entity("events_interests", b =>
                {
                    b.HasOne("BeItmoBackend.Data.Interests.Models.InterestDbModel", null)
                        .WithMany()
                        .HasForeignKey("InterestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_events_interests_interests_interests_id");

                    b.HasOne("BeItmoBackend.Data.UniversityEvents.Models.UniversityEventDbModel", null)
                        .WithMany()
                        .HasForeignKey("UniversityEventDbModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_events_interests_university_events_university_event_db_mode");
                });
#pragma warning restore 612, 618
        }
    }
}
